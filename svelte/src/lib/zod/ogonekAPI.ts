/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Ogonek API
 * OpenAPI spec version: 1.10.0
 */
import { z as zod } from "zod";

/**
 * @summary All content from the website
 */
export const listContentResponseItem = zod.object({
  id: zod.string(),
  markdown: zod.string(),
  metaDescription: zod.string().nullish(),
  publishedAt: zod.iso.datetime({}).nullish(),
  slug: zod.string(),
  status: zod.enum(["draft", "published"]),
  title: zod.string(),
  updatedAt: zod.iso.datetime({}),
  updatedBy: zod.string(),
  version: zod.number(),
});
export const listContentResponse = zod.array(listContentResponseItem);

/**
 * @summary Fetches content by id (admin interface)
 */
export const fetchContentParams = zod.object({
  id: zod.string().describe("Content ID"),
});

export const fetchContentResponse = zod.object({
  id: zod.string(),
  markdown: zod.string(),
  metaDescription: zod.string().nullish(),
  publishedAt: zod.iso.datetime({}).nullish(),
  slug: zod.string(),
  status: zod.enum(["draft", "published"]),
  title: zod.string(),
  updatedAt: zod.iso.datetime({}),
  updatedBy: zod.string(),
  version: zod.number(),
});

/**
 * @summary Deletes content
 */
export const deleteContentParams = zod.object({
  id: zod.string().describe("Content ID"),
});

/**
 * @summary Updates content
 */
export const updateContentParams = zod.object({
  id: zod.string().describe("content ID"),
});

export const updateContentBody = zod.object({
  markdown: zod.string().nullish(),
  metaDescription: zod.string().nullish(),
  slug: zod.string().nullish(),
  title: zod.string().nullish(),
});

/**
 * @summary Updates content
 */
export const publishContentParams = zod.object({
  id: zod.string().describe("content ID"),
});

/**
 * @summary Updates content
 */
export const unpublishContentParams = zod.object({
  id: zod.string().describe("content ID"),
});

/**
 * @summary Binds the student to the teacher
 */
export const bindStudentToTeacherBody = zod.object({
  inviteToken: zod.string(),
  studentId: zod.string(),
});

/**
 * @summary Generates the invite link for the teacher
 */
export const generateInviteLinkQueryParams = zod.object({
  isRegistered: zod
    .object({
      isRegistered: zod.string(),
    })
    .describe("Invite token"),
});

/**
 * @summary Receives the refresh token as json, gets it, then decodes, finds the user id, and generates a new access token
 */
export const refreshBody = zod.object({
  refreshToken: zod.string(),
});

export const refreshResponseAccessTokenExpiresAtMin = 0;

export const refreshResponse = zod.object({
  accessToken: zod.object({
    expiresAt: zod.number().min(refreshResponseAccessTokenExpiresAtMin),
    token: zod.string(),
  }),
});

export const signinBodyPassMin = 8;

export const signinBodyPassMax = 32;
export const signinBodyUsernameMin = 3;

export const signinBodyUsernameMax = 50;

export const signinBody = zod.object({
  pass: zod.string().min(signinBodyPassMin).max(signinBodyPassMax),
  username: zod.string().min(signinBodyUsernameMin).max(signinBodyUsernameMax),
});

export const signinResponseAccessTokenExpiresAtMin = 0;
export const signinResponseRefreshTokenExpiresAtMin = 0;

export const signinResponse = zod.object({
  accessToken: zod.object({
    expiresAt: zod.number().min(signinResponseAccessTokenExpiresAtMin),
    token: zod.string(),
  }),
  refreshToken: zod.object({
    expiresAt: zod.number().min(signinResponseRefreshTokenExpiresAtMin),
    token: zod.string(),
  }),
});

export const signupBodyNameMin = 3;

export const signupBodyNameMax = 100;
export const signupBodyPassMin = 8;

export const signupBodyPassMax = 128;
export const signupBodyUsernameMin = 2;

export const signupBodyUsernameMax = 50;

export const signupBody = zod.object({
  email: zod.email(),
  name: zod.string().min(signupBodyNameMin).max(signupBodyNameMax),
  pass: zod.string().min(signupBodyPassMin).max(signupBodyPassMax),
  role: zod.string(),
  username: zod.string().min(signupBodyUsernameMin).max(signupBodyUsernameMax),
});

/**
 * @summary Fetches content by slug (public endpoint)
 */
export const fetchContentPublicParams = zod.object({
  slug: zod.string().describe("Content Slug"),
});

export const fetchContentPublicResponse = zod.object({
  markdown: zod.string(),
  metaDescription: zod.string().nullish(),
  title: zod.string(),
});

/**
 * @summary Decks the user has access to
 */
export const listDecksQueryPageMin = 0;
export const listDecksQueryPerPageMin = 0;

export const listDecksQueryParams = zod.object({
  page: zod
    .number()
    .min(listDecksQueryPageMin)
    .optional()
    .describe("Page number"),
  per_page: zod
    .number()
    .min(listDecksQueryPerPageMin)
    .optional()
    .describe("Items per page"),
  search: zod.string().optional().describe("Search term"),
  assignee: zod.string().optional().describe("Filter by assignee"),
});

export const listDecksResponse = zod.object({
  data: zod.array(
    zod.object({
      assigneeName: zod.string().nullish(),
      cardCount: zod.number(),
      description: zod.string().nullish(),
      id: zod.string(),
      isSubscribed: zod.boolean().nullish(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
      visibility: zod.string(),
    }),
  ),
  page: zod.number(),
  per_page: zod.number(),
});

/**
 * @summary Only public decks
 */
export const listDecksPublicResponseItem = zod.object({
  description: zod.string().nullish(),
  id: zod.string(),
  title: zod.string(),
});
export const listDecksPublicResponse = zod.array(listDecksPublicResponseItem);

/**
 * @summary One deck
 */
export const fetchDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

export const fetchDeckResponse = zod.object({
  cards: zod.array(
    zod.object({
      back: zod.string(),
      front: zod.string(),
      id: zod.string(),
      mediaUrl: zod.string().nullish(),
    }),
  ),
  deck: zod.object({
    assignee: zod.string().nullish(),
    cardCount: zod.number(),
    createdAt: zod.iso.datetime({}),
    createdBy: zod.string(),
    description: zod.string().nullish(),
    id: zod.string(),
    isSubscribed: zod.boolean().nullish(),
    title: zod.string(),
    visibility: zod.string(),
  }),
});

/**
 * @summary Deletes a deck
 */
export const deleteDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

/**
 * @summary Updates a deck
 */
export const updateDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

export const updateDeckBody = zod.object({
  cards: zod.array(
    zod.object({
      back: zod.string(),
      front: zod.string(),
      id: zod.string().nullish(),
      mediaUrl: zod.string().nullish(),
    }),
  ),
  deck: zod.object({
    assignee: zod.string().nullish(),
    description: zod.string().nullish(),
    title: zod.string().nullish(),
    visibility: zod.string().nullish(),
  }),
});

/**
 * @summary Duplicates a deck, returns new id
 */
export const duplicateDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

/**
 * @summary Cancel multipart upload
 */
export const abortMultipartUploadBody = zod.object({
  fileId: zod.string(),
  s3Key: zod.string(),
  uploadId: zod.string(),
});

/**
 * @summary Complete a part of the upload
 */
export const completeMultipartUploadBody = zod.object({
  fileId: zod.string(),
  parts: zod.array(
    zod.object({
      etag: zod.string(),
      partNumber: zod.number(),
    }),
  ),
  s3Key: zod.string(),
  uploadId: zod.string(),
});

/**
 * @summary Multipart upload init endpoint
 */
export const initMultipartUploadBody = zod.object({
  contentType: zod.string(),
  fileName: zod.string(),
  fileSize: zod.number(),
  parentId: zod.string().nullish(),
  taskId: zod.string().nullish(),
  totalParts: zod.number(),
});

export const initMultipartUploadResponse = zod.object({
  fileId: zod.string(),
  parts: zod.array(
    zod.object({
      partNumber: zod.number(),
      url: zod.string(),
    }),
  ),
  s3Key: zod.string(),
  uploadId: zod.string(),
});

/**
 * @summary Fetches all the files associated with a task and returns their presigned URLs
 */
export const fetchPresignedUrlsBatchParams = zod.object({
  file_id: zod.string().describe("The DB id of the task the files belong to"),
});

export const fetchPresignedUrlsBatchResponse = zod.object({
  urls: zod.array(
    zod.object({
      fileId: zod.string(),
      url: zod.string(),
    }),
  ),
});

export const fetchPresignedUrlParams = zod.object({
  encoded_key: zod.string().describe("Base64 encoded file key"),
});

export const fetchPresignedUrlResponse = zod.object({
  url: zod.string(),
});

/**
 * @summary Deletes file
 */
export const deleteFileParams = zod.object({
  id: zod.string().describe("File ID"),
});

/**
 * @summary Returns the list of all cards due for review
 */
export const fetchDueCardsResponseItem = zod.object({
  back: zod.string(),
  front: zod.string(),
  id: zod.string(),
  mediaUrl: zod.string().nullish(),
});
export const fetchDueCardsResponse = zod.array(fetchDueCardsResponseItem);

/**
 * @summary Subscribes the user to the deck
 */
export const subscribeToDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

/**
 * @summary Unsubscribes the user from the deck
 */
export const unsubscribeFromDeckParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

/**
 * @summary Updates the learn progress on a card
 */
export const updateCardProgressParams = zod.object({
  id: zod.string().describe("Card ID"),
});

export const updateCardProgressBody = zod.object({
  quality: zod.number(),
});

/**
 * @summary Resets the progress for a particular deck
 */
export const resetDeckProgressParams = zod.object({
  id: zod.string().describe("Deck ID"),
});

/**
 * @summary Lessons belonging to a user
 */
export const listLessonsQueryPageMin = 0;
export const listLessonsQueryPerPageMin = 0;

export const listLessonsQueryParams = zod.object({
  page: zod
    .number()
    .min(listLessonsQueryPageMin)
    .optional()
    .describe("Page number"),
  per_page: zod
    .number()
    .min(listLessonsQueryPerPageMin)
    .optional()
    .describe("Items per page"),
  search: zod.string().optional().describe("Search term"),
  assignee: zod.string().optional().describe("Filter by assignee"),
});

export const listLessonsResponse = zod.object({
  data: zod.array(
    zod
      .object({
        assigneeName: zod.string(),
        createdAt: zod.iso.datetime({}),
        id: zod.string(),
        seen: zod.boolean().nullish(),
        title: zod.string(),
        topic: zod.string(),
      })
      .describe("Mini-lesson"),
  ),
  page: zod.number(),
  per_page: zod.number(),
});

/**
 * @summary Fetches lesson by id
 */
export const fetchLessonParams = zod.object({
  id: zod.string().describe("Lesson ID"),
});

export const fetchLessonResponse = zod
  .object({
    assignee: zod.string(),
    assigneeName: zod.string(),
    createdAt: zod.iso.datetime({}),
    id: zod.string(),
    markdown: zod.string(),
    photo: zod
      .union([
        zod.null(),
        zod.object({
          altDescription: zod.string().nullish(),
          id: zod.string(),
          photographerName: zod.string(),
          photographerUsername: zod.string(),
          unsplashId: zod.string(),
          urls: zod.any(),
        }),
      ])
      .optional(),
    title: zod.string(),
    topic: zod.string(),
    updatedAt: zod.iso.datetime({}),
  })
  .describe(
    "Version to indulge swift OpenAPI Generator. ATTENTION: camelCase may break the iOS app! I fucked up the last build",
  );

/**
 * @summary Deletes lesson
 */
export const deleteLessonParams = zod.object({
  id: zod.string().describe("Lesson ID"),
});

/**
 * @summary Updates lesson
 */
export const updateLessonParams = zod.object({
  id: zod.string().describe("Lesson ID"),
});

export const updateLessonBody = zod.object({
  assignee: zod.string().nullish(),
  createdBy: zod.string().nullish(),
  id: zod.string().nullish(),
  markdown: zod.string().nullish(),
  mediaUrl: zod.string().nullish(),
  title: zod.string().nullish(),
  topic: zod.string().nullish(),
});

/**
 * @summary Adds a photo to the lesson
 */
export const upsertPhotoParams = zod.object({
  id: zod.string().describe("Lesson ID"),
});

export const upsertPhotoBody = zod.object({
  altDescription: zod.string().nullish(),
  unsplashId: zod.string(),
  urls: zod.object({
    full: zod.string(),
    raw: zod.string(),
    regular: zod.string(),
    small: zod.string(),
    thumb: zod.string(),
  }),
  user: zod.object({
    name: zod.string(),
    username: zod.string(),
  }),
});

export const registerDeviceTokenBody = zod.object({
  platform: zod.string(),
  token: zod.string(),
});

/**
 * @summary This data gives info about notification badges
 */
export const fetchBadgesResponse = zod.object({
  dueCards: zod.number().nullish(),
  unseenDecks: zod.number(),
  unseenLessons: zod.number(),
  unseenTasks: zod.number(),
});

export const fetchContextResponse = zod.object({
  callUrl: zod.string().nullish(),
  preferences: zod.object({
    autoSubscribe: zod.boolean(),
    emailNotifications: zod.boolean(),
    language: zod.string(),
    pushNotifications: zod.boolean(),
    theme: zod.string(),
  }),
  profile: zod
    .object({
      avatarUrl: zod.string().nullish(),
      telegramId: zod.string().nullish(),
      userId: zod.string(),
      videoCallUrl: zod.string().nullish(),
    })
    .describe("The default profile struct"),
  students: zod.array(
    zod.object({
      email: zod.string(),
      id: zod.string(),
      markdown: zod.string().nullish(),
      name: zod.string(),
      studentTelegramId: zod.string().nullish(),
      username: zod.string(),
    }),
  ),
  user: zod.object({
    email: zod.string(),
    id: zod.string(),
    name: zod.string(),
    role: zod.enum(["student", "teacher", "moderator", "admin", "god"]),
    username: zod.string(),
  }),
});

/**
 * @summary This data populates the dashboard/home view
 */
export const fetchDashboardResponse = zod.object({
  activity: zod.array(
    zod.object({
      action: zod.string(),
      createdAt: zod.iso.datetime({}).nullish(),
      modelId: zod.string(),
      modelType: zod.string(),
    }),
  ),
  decks: zod.array(
    zod.object({
      assigneeName: zod.string().nullish(),
      cardCount: zod.number(),
      description: zod.string().nullish(),
      id: zod.string(),
      isSubscribed: zod.boolean().nullish(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
      visibility: zod.string(),
    }),
  ),
  learnData: zod.object({
    cardsStudiedToday: zod.number(),
    currentStreak: zod.number(),
  }),
  lessons: zod.array(
    zod
      .object({
        assigneeName: zod.string(),
        createdAt: zod.iso.datetime({}),
        id: zod.string(),
        seen: zod.boolean().nullish(),
        title: zod.string(),
        topic: zod.string(),
      })
      .describe("Mini-lesson"),
  ),
  tasks: zod.array(
    zod.object({
      assigneeName: zod.string(),
      completed: zod.boolean(),
      dueDate: zod.iso.datetime({}).nullish(),
      id: zod.string(),
      priority: zod.number(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
    }),
  ),
});

/**
 * @summary Tasks belonging to a user (through assignment or direct ownership)
 */
export const listTasksQueryPageMin = 0;
export const listTasksQueryPerPageMin = 0;

export const listTasksQueryParams = zod.object({
  page: zod
    .number()
    .min(listTasksQueryPageMin)
    .optional()
    .describe("Page number"),
  per_page: zod
    .number()
    .min(listTasksQueryPerPageMin)
    .optional()
    .describe("Items per page"),
  search: zod.string().optional().describe("Search term"),
  assignee: zod.string().optional().describe("Filter by assignee"),
  completed: zod.boolean().optional().describe("Filter by completion status"),
  priority: zod.number().optional().describe("Filter by priority"),
});

export const listTasksResponse = zod.object({
  data: zod.array(
    zod.object({
      assigneeName: zod.string(),
      completed: zod.boolean(),
      dueDate: zod.iso.datetime({}).nullish(),
      id: zod.string(),
      priority: zod.number(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
    }),
  ),
  page: zod.number(),
  per_page: zod.number(),
});

/**
 * @summary One Task
 */
export const fetchTaskParams = zod.object({
  id: zod.string().describe("Task ID"),
});

export const fetchTaskResponse = zod.object({
  files: zod.array(
    zod.object({
      id: zod.string(),
      mimeType: zod.string().nullish(),
      name: zod.string(),
      ownerId: zod.string(),
      s3Key: zod.string().nullish(),
      size: zod.number(),
    }),
  ),
  task: zod.object({
    assignee: zod.string(),
    assigneeName: zod.string(),
    completed: zod.boolean(),
    createdAt: zod.iso.datetime({}),
    createdBy: zod.string(),
    dueDate: zod.iso.datetime({}).nullish(),
    id: zod.string(),
    markdown: zod.string(),
    priority: zod.number(),
    title: zod.string(),
    updatedAt: zod.iso.datetime({}),
  }),
});

/**
 * @summary Toggles completed/not completed on a task
 */
export const toggleTaskParams = zod.object({
  id: zod.string().describe("Task ID"),
});

export const toggleTaskResponse = zod.object({
  files: zod.array(
    zod.object({
      id: zod.string(),
      mimeType: zod.string().nullish(),
      name: zod.string(),
      ownerId: zod.string(),
      s3Key: zod.string().nullish(),
      size: zod.number(),
    }),
  ),
  task: zod.object({
    assignee: zod.string(),
    assigneeName: zod.string(),
    completed: zod.boolean(),
    createdAt: zod.iso.datetime({}),
    createdBy: zod.string(),
    dueDate: zod.iso.datetime({}).nullish(),
    id: zod.string(),
    markdown: zod.string(),
    priority: zod.number(),
    title: zod.string(),
    updatedAt: zod.iso.datetime({}),
  }),
});

/**
 * @summary Deletes a task
 */
export const deleteTaskParams = zod.object({
  id: zod.string().describe("Task ID"),
});

/**
 * @summary Updates the task
 */
export const updateTaskParams = zod.object({
  id: zod.string().describe("Task ID"),
});

export const updateTaskBody = zod.object({
  assignee: zod.string().nullish(),
  completed: zod.boolean().nullish(),
  dueDate: zod.iso.datetime({}).nullish(),
  markdown: zod.string().nullish(),
  priority: zod.number().nullish(),
  title: zod.string().nullish(),
});

/**
 * @summary Fetches self for the user
 */
export const fetchMeResponse = zod.object({
  email: zod.string(),
  id: zod.string(),
  name: zod.string(),
  role: zod.enum(["student", "teacher", "moderator", "admin", "god"]),
  username: zod.string(),
});

/**
 * @summary Updates the user by their claims
 */
export const updateUserBody = zod.object({
  email: zod.string().nullish(),
  name: zod.string().nullish(),
  pass: zod.string().nullish(),
  username: zod.string().nullish(),
});

/**
 * @summary Gets the inviter's credentials
 */
export const fetchInviterQueryParams = zod.object({
  invite: zod.string().optional().describe("Invite token"),
});

export const fetchInviterResponse = zod.object({
  email: zod.string(),
  id: zod.string(),
  name: zod.string(),
  role: zod.enum(["student", "teacher", "moderator", "admin", "god"]),
  username: zod.string(),
});

/**
 * @summary Fetch the profile
 */
export const fetchProfileResponse = zod
  .object({
    avatarUrl: zod.string().nullish(),
    telegramId: zod.string().nullish(),
    userId: zod.string(),
    videoCallUrl: zod.string().nullish(),
  })
  .describe("The default profile struct");

/**
 * @summary Update the profile, or create a new one if already there
 */
export const upsertProfileBody = zod
  .object({
    avatarUrl: zod.string().nullish(),
    telegramId: zod.string().nullish(),
    videoCallUrl: zod.string().nullish(),
  })
  .describe("The profile that gets decoded");

export const listStudentsResponseItem = zod.object({
  email: zod.string(),
  id: zod.string(),
  markdown: zod.string().nullish(),
  name: zod.string(),
  studentTelegramId: zod.string().nullish(),
  username: zod.string(),
});
export const listStudentsResponse = zod.array(listStudentsResponseItem);

export const fetchStudentParams = zod.object({
  id: zod.string().describe("Student ID"),
});

export const fetchStudentResponse = zod.object({
  decks: zod.array(
    zod.object({
      assigneeName: zod.string().nullish(),
      cardCount: zod.number(),
      description: zod.string().nullish(),
      id: zod.string(),
      isSubscribed: zod.boolean().nullish(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
      visibility: zod.string(),
    }),
  ),
  lessons: zod.array(
    zod
      .object({
        assigneeName: zod.string(),
        createdAt: zod.iso.datetime({}),
        id: zod.string(),
        seen: zod.boolean().nullish(),
        title: zod.string(),
        topic: zod.string(),
      })
      .describe("Mini-lesson"),
  ),
  student: zod.object({
    email: zod.string(),
    id: zod.string(),
    markdown: zod.string().nullish(),
    name: zod.string(),
    studentTelegramId: zod.string().nullish(),
    username: zod.string(),
  }),
  tasks: zod.array(
    zod.object({
      assigneeName: zod.string(),
      completed: zod.boolean(),
      dueDate: zod.iso.datetime({}).nullish(),
      id: zod.string(),
      priority: zod.number(),
      seen: zod.boolean().nullish(),
      title: zod.string(),
    }),
  ),
});

export const upsertStudentParams = zod.object({
  id: zod.string().describe("Student ID"),
});

export const removeStudentParams = zod.object({
  id: zod.string().describe("Student ID"),
});

export const updateStudentParams = zod.object({
  id: zod.string().describe("Student ID"),
});

export const updateStudentBody = zod.object({
  markdown: zod.string().nullish(),
  studentTelegramId: zod.string().nullish(),
});
