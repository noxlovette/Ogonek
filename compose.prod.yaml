services:
  traefik:
    image: traefik:v3.3
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
       - "127.0.0.1:3333:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - web
    restart: unless-stopped

  svelte:
    build:
      context: ./svelte
      dockerfile: Dockerfile
    container_name: svelte-fl
    env_file: ./svelte/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.svelte.rule=Host(`localhost`)"
      - "traefik.http.services.svelte.loadbalancer.server.port=3000"
    networks:
      - web
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  axum:
    build:
      context: ./axum
      dockerfile: Dockerfile
    container_name: axum-fl
    env_file: ./axum/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  postgres:
    image: postgres:17-alpine
    container_name: pg-fl
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - internal
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G

volumes:
  db-data:
    name: db-fl

networks:
  web:
    name: web
  internal:
    name: internal